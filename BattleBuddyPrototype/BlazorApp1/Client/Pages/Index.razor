@page "/"
@using BlazorApp1.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@{
    var leftIndex = 0;
    var rightIndex = 0;
}

@code
{
    int selectedLeftIndex = -1;
    int selectedRightIndex = -1;
}

<PageTitle>Index</PageTitle>

<button @onclick="@(e => RequestFocus("left"))">Focus Left</button>
<button @onclick="@(e => RequestFocus("none"))">Center</button>
<button @onclick="@(e => RequestFocus("right"))">Focus Right</button>
<button @onclick="@(e => RequestReload())">Reload</button>
                
<style type="text/css">
    ul.entry-list {
        list-style-type: none;
    }

    ul.entry-list li {
        padding: 5px 10px;
        background-color: cadetblue;
        color: white;
        margin-bottom: 2px;
    }

    ul.entry-list li.selected {
        background-color: cornflowerblue
    }
</style>

<table style="margin-top:10px;">
    <tbody>
        <tr>
            <td style="vertical-align: top">
                <ul class="entry-list">
                    <li @onclick="@(e => ClickEntry(SideIdentifier.Left, "top"))">Top</li>
                @foreach(var entry in entries[SideIdentifier.Left])
                {
                    var index = leftIndex;
                    
                    <li class="@(selectedLeftIndex == index ? "selected" : "")" @onclick="@(e => ScrollToIndex(SideIdentifier.Left, index))">@entry</li>

                    leftIndex += 1;
                }
                    <li @onclick="@(e => ClickEntry(SideIdentifier.Left, "bottom"))">Bottom</li>
                </ul>
            </td>
            <td style="vertical-align: top">
                <ul class="entry-list">
                    <li @onclick="@(e => ClickEntry(SideIdentifier.Right, "top"))">Top</li>
                @foreach(var entry in entries[SideIdentifier.Right])
                {
                    var index = rightIndex;
                    <li class="@(selectedRightIndex == index ? "selected" : "")" @onclick="@(e => ScrollToIndex(SideIdentifier.Right, index))">@entry</li>

                    rightIndex += 1;
                }
                    <li @onclick="@(e => ClickEntry(SideIdentifier.Right, "bottom"))">Bottom</li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private Dictionary<SideIdentifier, List<string>> entries = new Dictionary<SideIdentifier, List<string>>
    {
        {SideIdentifier.Left , new List<string>{"dummy"} },
        {SideIdentifier.Right , new List<string>() }
    };
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<SideIdentifier, List<string>>("ReloadEntries", (side, newEntries) =>
        {
            entries[side] = newEntries;
            StateHasChanged();
        });

        hubConnection.On<SideIdentifier, int>("ScrollToIndex", (side, index) =>
        {
            if (side == SideIdentifier.Left)
            {
                selectedLeftIndex = index;
            }
            else
            {
                selectedRightIndex = index;
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("RequestEntries");
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public async Task ClickEntry(SideIdentifier side, string entry)
    {
        if (hubConnection is not null)
        {
            var index = entries[side].IndexOf(entry);

            if(index != -1)
            {
                await hubConnection.SendAsync("RequestScrollToIndex", side, index);
            }
            else
            {
                await hubConnection.SendAsync("ScrollTo", side, entry);
            }
        }
    }

    public async Task ScrollToIndex(SideIdentifier side, int index)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RequestScrollToIndex", side, index);
        }
    }

    public async Task RequestFocus(string target)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RequestFocus", target);
        }
    }

    public async Task RequestReload()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RequestReload");
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}