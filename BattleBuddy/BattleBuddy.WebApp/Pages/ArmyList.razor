@page "/armyList"
@using BattleBuddy.WebApp.Services
@using BattleBuddy.WebApp.Services.SignalR
@using BattleBuddy.WebApp.StateContainers
@inject ArmyListService ArmyListService
@inject SignalRMessageFactory MessageFactory
@inject SignalRMessagingService MessagingService
@inject Game Game

<div class="d-flex flex-column">
    <div>ArmyList
        <div class="btn btn-secondary" style="float:right" @onclick="Initialize"><span>Initialize</span></div>
        <div class="btn btn-secondary" style="float:right" @onclick="Swap"><span>Swap</span></div>
        <div class="btn btn-secondary" style="float:right" @onclick="UpdateLists"><span>Reload</span></div>
    </div>
    
    @foreach (var entry in Game.ArmyListEntries.Where(e => e.Origin.Equals(Origin, StringComparison.OrdinalIgnoreCase)))
    {
        <div class="btn btn-primary mt-1" @onclick="() => ScrollToEntry(entry.Uid)">
            <span>@entry.Name</span>
        </div>
    }
</div>

@code {
    private List<ArmyListEntryDto> Entries { get; set; } = new();
    private string Origin = "left";

    protected override void OnInitialized()
    {
        MessagingService.Initialize();
        MessagingService.SubscribeToMessage("ReloadArmyLists", () =>
        {
            InvokeAsync(StateHasChanged);
        });
        base.OnInitialized();
    }

    async Task ScrollToEntry(Guid id)
    {
        var message = MessageFactory.CreateScrollToArmyListEntryMessage(id);
        await MessagingService.SendMessage(message);
    }

    void Swap()
    {
        Origin = Origin.Equals("left", StringComparison.OrdinalIgnoreCase) ? "right" : "left";
    }

    async Task Initialize()
    {
        await MessagingService.SendMessage(MessageFactory.CreateInitializeMessage());
    }

    async Task UpdateLists()
    {
        await MessagingService.SendMessage(MessageFactory.CreateRequestListUpdateMessage());
    }
}
