@page "/armyList"
@using BattleBuddy.WebApp.Services.SignalR
@using BattleBuddy.WebApp.StateContainers
@using BattleBuddy.WebApp.Services
@using BattleBuddy.Shared
@inject SignalRMessageFactory MessageFactory
@inject SignalRMessagingService MessagingService
@inject SessionConfiguration SessionConfiguration
@inject Game Game

<div class="d-flex flex-row">
    <label for="customRange1" class="form-label" style="margin-right: 5px;">Zoom&nbsp;(@ZoomFactor%)</label>
    <input type="range" class="form-range" id="customRange1" min="75" max="125" step="25" @bind="@ZoomFactor">
</div>

<div class="d-flex justify-content-around align-items-center">
    <input type="radio" class="btn-check" name="focus-selection" id="left-focus" checked="@(Game.ColumnLayout == ColumnLayout.ExtendLeft)" @onchange="() => ChangeLayout(ColumnLayout.ExtendLeft)" autocomplete="off">
    <label class="btn btn-outline-dark flex-fill" for="left-focus">Left</label>
    
    <input type="radio" class="btn-check" name="focus-selection" id="justify" checked="@(Game.ColumnLayout == ColumnLayout.Justify)" @onchange="() => ChangeLayout(ColumnLayout.Justify)" autocomplete="off">
    <label class="btn btn-outline-dark flex-fill" for="justify">Justify</label>

    <input type="radio" class="btn-check" name="focus-selection" id="right-focus" checked="@(Game.ColumnLayout == ColumnLayout.ExtendRight)" @onchange="() => ChangeLayout(ColumnLayout.ExtendRight)" autocomplete="off">
    <label class="btn btn-outline-dark flex-fill" for="right-focus">Right</label>
</div>

<div class="d-flex flex-column">
    <div class="btn btn-primary mt-1" @onclick="() => ScrollToPercent(0)">
        <span>Top</span>
    </div>

    @foreach (var entry in Entries)
    {
        <div class="btn btn-primary mt-1" @onclick="() => ScrollToEntry(entry.Uid)">
            <span>@entry.Name</span>
        </div>
    }
    
    <div class="btn btn-primary mt-1" @onclick="() => ScrollToPercent(100)">
        <span>Bottom</span>
    </div>
</div>

@code {
    event EventHandler? ZoomFactorChanged;
    int _zoomFactorInternal = 100;

    public int ZoomFactor
    {
        get => SessionConfiguration.ParticipantRole == Participants.PlayerA ? Game.LeftZoomFactor : Game.RightZoomFactor;
        set
        {
            _zoomFactorInternal = value;
            ZoomFactorChanged?.Invoke(this, EventArgs.Empty);
        }
    }

    private SideIdentifier GetSideIdentifier() => SessionConfiguration.ParticipantRole == Participants.PlayerA
            ? SideIdentifier.Left
                : SideIdentifier.Right;

    private IEnumerable<ArmyListEntryDto> Entries => Game.ArmyListEntries.Where(e => 
    e.Origin.Equals(OriginText, StringComparison.OrdinalIgnoreCase));

    private string OriginText => SessionConfiguration.ParticipantRole == Participants.PlayerA ? "left" : "right";

    protected override void OnInitialized()
    {
        MessagingService.Initialize();
        MessagingService.SubscribeToMessage("ReloadArmyLists", () =>
        {
            InvokeAsync(StateHasChanged);
        });

        Game.OnChange += UpdateUi;
        SessionConfiguration.OnChange += UpdateUi;
        ZoomFactorChanged += async (_, __) => { await ChangeZoomFactor(_zoomFactorInternal); };

        base.OnInitialized();
    }

    async Task ChangeLayout(ColumnLayout layout)
    {
        switch (layout)
        {
            case ColumnLayout.ExtendLeft:
                await MessagingService.SendMessage(MessageFactory.CreateRequestExtendLeftColumnMessage());
                break;
            case ColumnLayout.ExtendRight:
                await MessagingService.SendMessage(MessageFactory.CreateRequestExtendRightColumnMessage());
                break;
            case ColumnLayout.Justify:
                await MessagingService.SendMessage(MessageFactory.CreateRequestJustifyColumnsMessage());
                break;
        }
    }

    async Task ChangeZoomFactor(int zoomFactor)
    {
        await MessagingService.SendMessage(MessageFactory.CreateRequestChangeZoomFactorMessage(GetSideIdentifier(), zoomFactor));
    }

    async Task ScrollToEntry(Guid id)
    {
        await MessagingService.SendMessage(MessageFactory.CreateScrollToArmyListEntryMessage(id));
    }

    async Task ScrollToPercent(int percent)
    {
        await MessagingService.SendMessage(MessageFactory.CreateScrollToPercent(OriginText, percent));
    }

    void UpdateUi(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask Dispose()
    {
        Game.OnChange -= UpdateUi;
        SessionConfiguration.OnChange -= UpdateUi;
        await MessagingService.Dispose();
    }
}
