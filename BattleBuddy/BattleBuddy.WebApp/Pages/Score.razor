@page "/score"
@using BattleBuddy.WebApp.Services
@using BattleBuddy.WebApp.Services.SignalR
@using System.Diagnostics
@inject ScoreService ScoreService
@inject Services.GameScore GameScore
@inject SignalRMessagingService MessagingService


<PageTitle>Score</PageTitle>

<p>This is the score @id</p>

<p>@(GameScore.TotalPlayerA) / @(GameScore.TotalPlayerB)</p>

<div class="d-flex justify-content-around align-items-center">
    <div style="width: 100px"></div>
    <div style="width: 100px">A</div>
    <div style="width: 100px">B</div>
</div>

<div class="d-flex justify-content-around align-items-center">
    <div style="width: 100px">Primary: </div>
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.IncreasePrimaryA)">+</button>
    @GameScore.PrimaryPlayerA
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.DecreasePrimaryA)">-</button>
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.IncreasePrimaryB)">+</button>
    @GameScore.PrimaryPlayerB
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.DecreasePrimaryB)">-</button>
</div>

<div class="d-flex justify-content-around align-items-center" style="margin-top: 10px;">
    <div style="width: 100px">Secondary: </div>
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.IncreaseSecondaryA)">+</button>
    @GameScore.SecondaryPlayerA
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.DecreaseSecondaryA)">-</button>
    
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.IncreaseSecondaryB)">+</button>
    @GameScore.SecondaryPlayerB
    <button class="btn btn-primary" @onclick="() => ModifyScore(ScoreModifier.DecreaseSecondaryB)">-</button>
</div>

@code {

    Guid id = Guid.NewGuid();
    async Task ModifyScore(ScoreModifier modifier)
    {
        ScoreService.ModifyScore(modifier);
        await MessagingService.SendMessage();
    }

    protected override async Task OnInitializedAsync()
    {
        await MessagingService.Initialize();

        Debug.WriteLine($"[{id}] registering message");
        MessagingService.RegisterToMessage("UpdateScore" , (string playerA, string playerB) =>
        {
            Debug.WriteLine($"[{id}] got message: {playerA}:{playerB}");
        });
    }

    protected override void OnInitialized()
    {
        GameScore.OnChange += UpdateUi;
    }
    
    public async ValueTask DisposeAsync()
    {
        GameScore.OnChange -= UpdateUi;
        await MessagingService.Dispose();
    }
    
    void UpdateUi(object? sender, EventArgs eventArgs)
    {
        InvokeAsync(StateHasChanged);
    }
}
